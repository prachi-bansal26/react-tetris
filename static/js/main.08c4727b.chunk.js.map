{"version":3,"sources":["utils.js","components/Tetris.jsx","components/Reset.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["blocks","I","data","Object","freeze","states","center","L","S","Z","rotateBlock","blockData","rotationAmount","newBlockData","_","cloneDeep","matrix","map","column","index","row","flipMatrix","reverse","generateBlockFromData","x","y","coordinates","i","length","j","a","b","push","getRandomBlock","blockStr","Math","floor","random","blockColor","Cell","props","cellclass","fill","className","style","backgroundColor","color","Tetris","colCount","cols","rowCount","rows","useState","gameOver","setGameOver","currentX","setCurrentX","currentY","setCurrentY","currentBlockType","setCurrentBlockType","currentRotation","setCurrentRotation","currentBlock","blockCharacter","blockInfo","max","getBlock","arr","arrc","buildEmptyBoard","committedBoard","setCommittedBoard","blockColorCode","colorStatus","forEach","moveBlockDown","downAllowed","isFullyFilled","value","emptyRow","splice","board","over","item","isGameOver","commitBoard","handleKeyEvents","e","Keycode","isEventKey","rotation","leftAllowed","rightAllowed","useEffect","timer","setTimeout","window","addEventListener","clearTimeout","removeEventListener","Reset","onResetClicked","onClick","App","resetCounter","setResetCounter","key","counter","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.08c4727b.chunk.js","sourcesContent":["import _ from 'lodash';\n\nconst iBlock = Object.freeze([\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n    [0, 1, 0, 0],\n]);\n\nconst lBlock = Object.freeze([\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 1],\n]);\n\nconst sBlock = Object.freeze([\n    [1, 1],\n    [1, 1],\n]);\n\nconst zBlock = Object.freeze([\n    [1, 1, 0],\n    [0, 1, 1]\n]);\n\nconst blocks = {\n    I: {\n        data: iBlock,\n        states: 2,\n        center: [1, 1],\n    },\n    L: {\n        data: lBlock,\n        states: 4,\n        center: [1, 1],\n    },\n    S: {\n        data: sBlock,\n        states: 1,\n        center: [0, 0],\n    },\n    Z: {\n        data: zBlock,\n        states: 4,\n        center: [1, 1],\n    }\n};\n\n// copied from - https://medium.com/front-end-weekly/matrix-rotation-%EF%B8%8F-6550397f16ab\nconst flipMatrix = matrix => (\n    matrix[0].map((column, index) => (\n        matrix.map(row => row[index])\n    ))\n);\n\nconst rotateMatrix = matrix => (\n    flipMatrix(matrix.reverse())\n);\n\n\nconst rotateBlock = (blockData, rotationAmount) => {\n    let newBlockData = _.cloneDeep(blockData)\n    while (rotationAmount) {\n        rotationAmount -= 1;\n        newBlockData = rotateMatrix(newBlockData);\n    }\n    return newBlockData;\n}\n\nconst generateBlockFromData = (blockData, center, x, y) => {\n    const coordinates = [];\n    for (let i = 0; i < blockData.length; i++) {\n        for (let j = 0; j < blockData[0].length; j++) {\n            if (blockData[i][j] === 0) continue;\n            const a = x + (i - center[0]);\n            const b = y + (j - center[1]);\n            coordinates.push([a, b]);\n        }\n    }\n    return coordinates;\n};\n\nexport const getBlock = (blockCharacter, x, y, rotation = 0) => {\n    const blockInfo = blocks[blockCharacter];\n    const rotationAmount = rotation % Math.max(1, blockInfo.states);\n    const blockData = rotateBlock(blockInfo.data, rotationAmount);\n\n    const { center } = blockInfo;\n    return generateBlockFromData(blockData, center, x, y);\n};\n\n\n//To get random block component letter\nexport const getRandomBlock = () => {\n    const blockStr = 'ILZS';\n    const str = blockStr[Math.floor(Math.random() * blockStr.length)];\n    return str;\n}\n\nexport const blockColor = (blockStr) => {\n    const color = {\n        'I': '#800000',\n        'L': '#008000',\n        'Z': '#999900',\n        'S': '#FA9900',\n    }\n    return color[blockStr];\n}\n","import React, { useEffect, useState } from 'react';\nimport Keycode from 'keycode';\nimport { getBlock, getRandomBlock, blockColor } from '../utils';\n\nimport '../styles/Tetris.css';\n\n// Cell component for filled/unfilled cells\nconst Cell = (props) => {\n    let cellclass = '';\n    if (props.fill === \"0\") {\n        cellclass = \"Cell\";\n    } else {\n        cellclass = \"Cell CellFill\";\n    }\n    return <div className={cellclass} style={{ backgroundColor: props.color }} ></div>\n}\n\nconst buildEmptyBoard = (rowCount, colCount) => {\n    let arr = [];\n    for (let i = 0; i < rowCount; i++) {\n        let arrc = [];\n        for (let j = 0; j < colCount; j++) {\n            arrc[j] = 0;\n        }\n        arr[i] = arrc;\n    }\n    return arr;\n};\n\nconst isGameOver = (board) => {\n    let over = false;\n    board[0].forEach((item) => {\n        if (item !== 0) {\n            over = true;\n        }\n    });\n    return over;\n}\n\n//main tetris component\nconst Tetris = (props) => {\n    const {cols: colCount, rows: rowCount } = props;\n    const [gameOver, setGameOver] = useState(false);\n    const [currentX, setCurrentX] = useState(Math.floor(colCount / 2));\n    const [currentY, setCurrentY] = useState(0);\n    const [currentBlockType, setCurrentBlockType] = useState(getRandomBlock());\n    const [currentRotation, setCurrentRotation] = useState(0);\n\n    const currentBlock = getBlock(currentBlockType, currentX, currentY, currentRotation);\n\n    const [committedBoard, setCommittedBoard] = useState(buildEmptyBoard(rowCount, colCount));\n\n    let rows = [];\n    for (let i = 0; i < rowCount; i++) {\n        let cols = [];\n        const blockColorCode = blockColor(currentBlockType);\n        for (let j = 0; j < colCount; j++) {\n            let colorStatus = 0;\n            if (committedBoard[i][j] != 0) {\n                colorStatus = committedBoard[i][j];\n            } else {\n                currentBlock.forEach(([x, y]) => {\n                    if (x === j && y === i) {\n                        colorStatus = blockColorCode;\n                    }\n                });\n            }\n\n            if (colorStatus != 0) {\n                cols.push(<Cell fill=\"1\" color={colorStatus} />);\n            } else {\n                cols.push(<Cell fill=\"0\" color=\"#FFF\" />);\n            }\n        }\n        rows.push(<div className=\"Row\">{cols}</div>);\n    }\n\n    //commit board state and render a new block\n    const commitBoard = () => {\n        const blockColorCode = blockColor(currentBlockType);\n        currentBlock.forEach(([x, y]) => {\n            // Block cells which haven't been rendered\n            if (y < 0) return;\n\n            committedBoard[y][x] = blockColorCode;\n        })\n        setCommittedBoard(committedBoard);\n\n        // Remove empty rows\n        for (let i = 0; i < rowCount; i++) {\n            let isFullyFilled = true;\n            committedBoard[i].forEach(value => {\n                if (value === 0) isFullyFilled = false;\n            });\n\n            if (isFullyFilled) {\n                const emptyRow = committedBoard[i].fill(0);\n                committedBoard.splice(i, 1);\n                committedBoard.splice(0, 0, emptyRow);\n            }\n        }\n\n        // check game over\n        if (isGameOver(committedBoard)) {\n            setGameOver(true);\n            return;\n        }\n\n        // Add new block\n        setCurrentBlockType(getRandomBlock());\n        setCurrentRotation(0);\n        setCurrentX(Math.floor(colCount / 2))\n        setCurrentY(0);\n    }\n\n    const moveBlockDown = () => {\n        let downAllowed = true;\n        currentBlock.forEach(([x, y]) => {\n            // Block cells which haven't been rendered\n            if (y < 0) return;\n\n            if (y + 1 >= rowCount || committedBoard[y + 1][x]) {\n                downAllowed = false;\n            }\n        });\n\n        if (downAllowed) {\n            setCurrentY(y => y + 1);\n        } else {\n            commitBoard();\n        }\n    }\n\n    //function called on arrow keypressed\n    let handleKeyEvents = (e) => {\n        if (Keycode.isEventKey(e, 'up')) {\n            setCurrentRotation(rotation => rotation + 1);\n        } else if (Keycode.isEventKey(e, 'down')) {\n            moveBlockDown();\n        } else if (Keycode.isEventKey(e, 'left')) {\n            let leftAllowed = true;\n            currentBlock.forEach(([x, y]) => {\n                // Block cells which haven't been rendered\n                if (y < 0) return;\n\n                if (x - 1 < 0 || committedBoard[y][x - 1]) {\n                    leftAllowed = false;\n                }\n            });\n\n            if (leftAllowed) {\n                setCurrentX(x => x - 1);\n            }\n        } else if (Keycode.isEventKey(e, 'right')) {\n            let rightAllowed = true;\n            currentBlock.forEach(([x, y]) => {\n                // Block cells which haven't been rendered\n                if (y < 0) return;\n\n                if (x + 1 >= colCount || committedBoard[y][x + 1]) {\n                    rightAllowed = false;\n                }\n            });\n\n            if (rightAllowed) {\n                setCurrentX(x => x + 1);\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (gameOver) {\n            window.removeEventListener('keydown', handleKeyEvents);\n            return;\n        }\n\n        const timer = setTimeout(moveBlockDown, 1000);\n        window.addEventListener('keydown', handleKeyEvents);\n\n        return () => {\n            window.clearTimeout(timer);\n            window.removeEventListener('keydown', handleKeyEvents);\n        };\n    });\n\n    if (gameOver) {\n        return \"Game Over\";\n    }\n\n    return (\n        <div className=\"Tetris\">{rows}</div>\n    )\n}\n\nexport default Tetris;\n","import React from 'react';\n\nconst Reset = ({ onResetClicked }) => {\n    return <button onClick={onResetClicked}>Reset</button>\n}\n\nexport default Reset;\n","import React, { Component, useState } from 'react';\nimport './App.css';\nimport Tetris from './components/Tetris';\nimport Reset from './components/Reset';\n\nconst ROWS = 12;\nconst COLS = 10;\n\nconst App = () => {\n    const [resetCounter, setResetCounter] = useState(0);\n    const incrementCounter = () => {\n        setResetCounter(counter => counter + 1);\n    };\n\n    return (\n        <div className=\"App\">\n            <Tetris key={`tetris-${resetCounter}`} rows={ROWS} cols={COLS} />\n            <aside>\n                <Reset onResetClicked={incrementCounter} />\n            </aside>\n        </div>\n    );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}